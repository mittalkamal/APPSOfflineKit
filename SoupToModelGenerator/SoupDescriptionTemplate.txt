//
//  {% swiftModelName %}SoupDescription.swift
//
//  DO NOT EDIT!
//  Generated by SoupToModelGenerator
//

import Foundation
import SmartStore

final class {% swiftModelName %}SoupDescription: SoupDescription {

    static let objectType = "{% objectType %}"
    static let soupName = "{% soupName %}"

    enum FieldName: String {
{% foreach(modelDesc in modelDescriptions) %}
        case {% modelDesc.swiftFieldName %} = "{% modelDesc.fieldName %}"
{% endforeach %}
    }

    enum ColumnName: String {
{% foreach(modelDesc in modelDescriptions) %}
        case {% modelDesc.swiftFieldName %} = "{{% soupName %}:{% modelDesc.fieldName %}}"
{% endforeach %}
    }

    override init() {

        let objectFieldSpecs: [SoupPropertyDescription] = [
{% foreach(modelDesc in modelDescriptions) %}
            SoupPropertyDescription(fieldName: FieldName.{% modelDesc.swiftFieldName %}.rawValue, searchable: {%[b] modelDesc.searchable %}),
{% endforeach %}
        ]
        let indexSpecs: [SFSoupIndex] = [
{% foreach(modelDesc in modelDescriptions) %}
{% if(modelDesc.searchable == TRUE) %}
{% if(modelDesc.fieldType == "string") %}
            SFSoupIndex(path: FieldName.{% modelDesc.swiftFieldName %}.rawValue, indexType:kSoupIndexTypeString, columnName: FieldName.{% modelDesc.swiftFieldName %}.rawValue)!,
{% elseif(modelDesc.fieldType == "int" || modelDesc.fieldType == "bool") %}
            SFSoupIndex(path: FieldName.{% modelDesc.swiftFieldName %}.rawValue, indexType:kSoupIndexTypeInteger, columnName: FieldName.{% modelDesc.swiftFieldName %}.rawValue)!,
{% elseif(modelDesc.fieldType == "double") %}
            SFSoupIndex(path: FieldName.{% modelDesc.swiftFieldName %}.rawValue, indexType:kSoupIndexTypeFloating, columnName: FieldName.{% modelDesc.swiftFieldName %}.rawValue)!,
{% endif %}
{% endif %}
{% endforeach %}
        ]

        super.init(objectType: {% swiftModelName %}SoupDescription.objectType, objectFieldSpecs: objectFieldSpecs, indexSpecs: indexSpecs, soupName: {% swiftModelName %}SoupDescription.soupName, orderByFieldName: nil)
    }


    override class func createSoupObject(_ soupDict: [AnyHashable : Any]) -> SoupObject {
        return {% swiftModelName %}SoupObject(soupDict: soupDict)
    }

}

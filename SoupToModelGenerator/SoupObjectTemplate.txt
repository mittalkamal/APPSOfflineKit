//
//  {% swiftModelName %}.swift
//
//  DO NOT EDIT!
//  Generated by SoupToModelGenerator
//

import Foundation
import SmartSync

final class {% swiftModelName %}SoupObject: SoupObject {

{% foreach(modelDesc in modelDescriptions) %}
{% if(modelDesc.nullable == TRUE) %}
{% if(modelDesc.fieldType == "string") %}
    var {% modelDesc.swiftPropertyName %}: String? {
        get { return fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? String }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
        {% elseif(modelDesc.fieldType == "int") %}
    var {% modelDesc.swiftPropertyName %}: Int? {
        get { return fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Int }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
        {% elseif(modelDesc.fieldType == "bool") %}
    var {% modelDesc.swiftPropertyName %}: Bool? {
        get { return fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Bool }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
        {% elseif(modelDesc.fieldType == "double") %}
    var {% modelDesc.swiftPropertyName %}: Double? {
        get { return fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Double }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
{% endif %}
{% else %}
{% if(modelDesc.fieldType == "string") %}
    var {% modelDesc.swiftPropertyName %}: String {
        get {
            guard let string = fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? String else { fatalError("Unable to get string value for {% modelDesc.swiftFieldName %}.") }
            return string
        }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
{% elseif(modelDesc.fieldType == "int") %}
    var {% modelDesc.swiftPropertyName %}: Int {
        get {
            guard let intValue = fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Int else { fatalError("Unable to get int value for {% modelDesc.swiftFieldName %}.") }
            return intValue
        }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
{% elseif(modelDesc.fieldType == "bool") %}
    var {% modelDesc.swiftPropertyName %}: Bool {
        get {
            guard let boolValue = fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Bool else { fatalError("Unable to get bool value for {% modelDesc.swiftFieldName %}.") }
            return boolValue
        }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
{% elseif(modelDesc.fieldType == "double") %}
    var {% modelDesc.swiftPropertyName %}: Double {
        get {
            guard let doubleValue = fieldValue(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue) as? Double else { fatalError("Unable to get double value for {% modelDesc.swiftFieldName %}.") }
            return doubleValue
        }
        set { updateSoup(forFieldName: {% swiftModelName %}SoupDescription.FieldName.{% modelDesc.swiftFieldName %}.rawValue, fieldValue: newValue) }
    }
{% endif %}
{% endif %}

{% endforeach %}

    private static var sDataSpec: {% swiftModelName %}SoupDescription?

    override class func dataSpec() -> SoupDescription {
        if sDataSpec == nil {
            sDataSpec = {% swiftModelName %}SoupDescription()
        }
        return sDataSpec!
    }
}
